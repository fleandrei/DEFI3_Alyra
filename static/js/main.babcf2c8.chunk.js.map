{"version":3,"sources":["getWeb3.js","RegisterAddress.js","RegisterProposal.js","Vote.js","Result.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","RegisterAddress","props","handleAutoriser","address","value","RegisterVoter","handleProposition","BeginProposalRegistering","whitelist","this","className","style","display","justifyContent","Card","width","Header","Body","ListGroup","variant","Item","Table","striped","bordered","hover","map","IsOwner","color","font_size","size","Form","Group","controlId","Control","type","id","placeholder","ref","input","Button","onClick","Reset_Destruct","Component","RegisterProposal","handleProposal","proposal","handleFin","EndProposalsRegistration","handleVote","EndProposal","StartVoting","alert","Param","sectionMaxHeight","heightProposalHeader","heightProposalBody","PaddingProposalBody","ProposalMaxHeight","ProposRegisterSection","propositions","Container","Jumbotron","background","as","overflowY","maxHeight","class","idx","height","padding","Description","Vote","proposalId","current","setState","HasVoted","EndVoting","handleTailling","IsVoteEnded","TaillingVotes","state","React","createRef","VoteSection","vote","disabled","prop","toString","Accordion","defaultActiveKey","Toggle","eventKey","Collapse","Proposition","WinPropId","backgroundColor","Score","Result","contract","methods","winningProposalid","call","then","res","NumVoter","toFixed","WorkflowStatus","RegisteringVoters","ProposalsRegistrationStarted","ProposalsRegistrationEnded","VotingSessionStarted","VotingSessionEnded","VotesTallied","Status_Sol2Web","Sol_Status","HandleReset","App","Status","Propositions","accounts","initState","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","Voting","networks","instance","Contract","abi","events","VoterRegistered","HandleVoterRegistered","HandleStartProposalRegistration","ProposalRegistered","HandleProposalRegistered","HandleProposalsRegistrationEnded","HandleVotingSessionStarted","Voted","HandleVote","HandleVotingSessionEnded","HandleVotesTallied","owner","owner_address","LoadState","error","GetStatus","statu","GetWhiteList","GetPropositions","p","includes","err","ev","voterAddress","returnValues","concat","event","PropId","ProposalDescriptionById","Proposal","NewProposition","send","from","BeginProposalsRegistration","BeginProposalStep","EndProposalStep","ProposalId","Reset","SelfDestruct","DestructContract","show","HandleDestruct","length","Boolean","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.babcf2c8.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\n\nimport \"./App.css\";\n\n\nclass RegisterAddress extends Component {\n  //state = { Status: WorkflowStatus.RegisteringVoters, whitelist: null, Propositions: null, web3: null, accounts: null, contract: null, IsOwner:false, VoteNumber:0 };\n\n  constructor(props){\n    super(props);\n  }\n\n  handleAutoriser = async()=>{\n    const address= this.address.value;\n    this.address.value=\"\";\n    this.props.RegisterVoter(address);\n  }\n\n\n  handleProposition = async()=>{\n    this.props.BeginProposalRegistering();\n  }\n\n\n  render() {\n    const whitelist  = this.props.whitelist;\n    //console.log(\"whitelist: \",whitelist);\n    \n    return (\n      <div className=\"App\">\n        <div>\n        <h2 className=\"text-center\">Dapp de Paiement</h2>\n           <hr></hr>\n           <br></br>\n        <h3 className=\"text-center\">Enregistrement des élécteurs</h3>\n        <br></br>\n       </div>\n       <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Liste des comptes autorisés</strong></Card.Header>\n            <Card.Body>\n            <div   >\n              <ListGroup variant=\"flush\"   >\n                <ListGroup.Item>\n                  <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>@</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {whitelist !== null &&\n                        whitelist.map((a) => <tr><td>{a}</td></tr>)\n                      }\n                    </tbody>\n                  </Table>\n                </ListGroup.Item>\n              </ListGroup>\n              </div>\n            </Card.Body>\n          </Card>\n        </div>\n        <br/>\n\n        {\n          this.props.IsOwner &&   //Seul l'owner a le droit de rajouter des électeurs à la whiteliste\n          <div>\n          <br></br>\n            <hr width=\"70%\" style={{color:\"green\"}}></hr>\n            <span style={{color:\"green\", font_size:\"40px\"}}><strong><font size=\"4\">Administrateur</font></strong></span> <br/><br/>\n            <div style={{display: 'flex', justifyContent: 'center'}}>              \n              <Card style={{ width: '50rem' }}>\n                <Card.Header><strong> Autoriser un nouveau compte</strong></Card.Header>\n                <Card.Body>\n                  <Form.Group controlId=\"formAddress\">\n                    <Form.Control type=\"text\"  id=\"address\" placeholder=\"Enter address\"\n                    ref={(input) => { this.address = input }}\n                    //ref={(input) => { this.handleAutoriser(input)}}\n                    />\n                  </Form.Group>\n                  \n                  \n                  <Button onClick={ this.handleAutoriser } variant=\"primary\" > Autoriser </Button>\n                </Card.Body>\n              </Card>\n            </div>\n              <br/>\n              <div>\n                <Button onClick={ this.handleProposition } variant=\"dark\" > Démarer la soumission de propositions </Button>\n              </div>  \n                <br/>\n                <br/>\n              <div  style={{ justifyContent: 'center'}}>\n                {this.props.Reset_Destruct}\n              </div>\n\n          </div>\n        }\n        <br></br>\n      \n      </div>\n    );\n }\n\n}\n\n\nexport default RegisterAddress;\n\n","import React, { Component } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport ReactDOM from 'react-dom';\nimport \"./App.css\";\n\n\nclass RegisterProposal extends Component {\n  //state = { Status: WorkflowStatus.RegisteringVoters, whitelist: null, Propositions: null, web3: null, accounts: null, contract: null, IsOwner:false, VoteNumber:0 };\n\n  constructor(props){\n    super(props);\n    //this.state = {EndProposal:false};\n    this.proposal = \"\";\n\n    this.Param = {sectionMaxHeight:\"300px\", heightProposalHeader:\"3rem\",heightProposalBody:\"50px\", PaddingProposalBody:\"1%\", ProposalMaxHeight:\"40px\"}\n  }\n\n\n  handleProposal = async()=>{\n    const proposal= this.proposal.value;\n    this.proposal.value= \"\";\n    this.props.RegisterProposal(proposal);\n\n  }\n\n  handleFin = async()=>{\n    this.props.EndProposalsRegistration();\n  }\n\n\n  handleVote = async()=>{\n    if (this.props.EndProposal) {\n      this.props.StartVoting();\n    }else{\n      alert(\"La session d'enregistrement des propositions n'a pas encore été terminé.\");\n    }\n  }\n\n\n  render() {\n    const propositions  = this.props.propositions;\n    console.log(\"RegisterProposal:render  propositions=\",propositions[0]);\n    var ProposRegisterSection;\n    if (this.props.EndProposal) {\n      ProposRegisterSection=<Container>\n      <Jumbotron style={{background:\"#ffcdd2\"}}>\n        <h2>La session d'enregistrement des propositions est terminée</h2>\n        <p>\n          Prochaine étape: voter pour les propositions\n        </p>\n        \n      </Jumbotron>\n      </Container>\n    }else{\n      ProposRegisterSection=<div>\n          <br></br>\n            <div style={{display: 'flex', justifyContent: 'center'}}>              \n              <Card style={{ width: '50rem' }}>\n                <Card.Header><strong> Ajouter une proposition</strong></Card.Header>\n                <Card.Body>\n                  <Form.Group controlId=\"formAddress\">\n                    <Form.Control as=\"textarea\" id=\"proposal\" placeholder=\"Entrer une proposition\"\n                    ref={(input) => { this.proposal = input }}\n                    />                  \n                    </Form.Group>\n                  \n                  \n                  <Button onClick={ this.handleProposal } variant=\"primary\" > Proposer </Button>\n                </Card.Body>\n              </Card>\n            </div>\n        </div>\n    }\n\n\n    return (\n      <div className=\"App\">\n        <div>\n        <h2 className=\"text-center\">Dapp de Paiement</h2>\n           <hr></hr>\n           <br></br>\n        <h3 className=\"text-center\">Soumission des Propositions</h3>\n        <br></br>\n       </div>\n       \n       {ProposRegisterSection}\n\n        <br/>\n       <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n\n            <Card.Header><strong>Liste des Propositions</strong></Card.Header>\n            <Card.Body>\n            <div style={{overflowY: 'scroll', maxHeight:this.Param.sectionMaxHeight}}>\n            \n              <ListGroup variant=\"flush\" class=\"overflow-auto\">\n              {propositions !== null &&\n                        propositions.map( (a , idx) => { return(<ListGroup.Item><Card > <Card.Header style={{height:this.Param.heightProposalHeader}}>Proposition {idx} </Card.Header ><Card.Body style={{height:this.Param.heightProposalBody, padding:this.Param.PaddingProposalBody }}><div style={{ overflowY: 'scroll', maxHeight:this.Param.ProposalMaxHeight}}>{a.Description}</div></Card.Body></Card></ListGroup.Item>)})\n              }\n              </ListGroup>\n            </div>\n               \n            </Card.Body>\n          </Card>\n        </div>\n        <br/>\n        \n\n        {\n          this.props.IsOwner &&   // Partie uniquement accessible à l'owner. Ce dernier a la possibilité de mettre fin à la phase d'enregistrement de propositions et de commencer la hase de vote \n              <div>\n                <hr width=\"70%\" style={{color:\"green\"}}></hr>\n                <span style={{color:\"green\", font_size:\"40px\"}}><strong><font size=\"4\">Administrateur</font></strong></span> <br/><br/>\n               \n                <div class=\"row justify-content-center\">\n                  <div class=\"col-3\">\n                    <Button onClick={ this.handleFin } variant=\"dark\" > Fin de la soumission de propositions </Button>\n                  </div>  \n                  <div class=\"col-3\">\n                    <Button onClick={ this.handleVote } variant=\"primary\" > Démarrer le vote </Button>\n                  </div>  \n                </div>\n\n                <br/>\n                <br/>\n                <div style={{ justifyContent: 'center'}}> \n                  {this.props.Reset_Destruct}\n                </div>\n              </div>\n\n          \n        }\n        <br></br>\n      \n      </div>\n    );\n }\n\n}\n\n\nexport default RegisterProposal;\n\n","import React, { Component } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Accordion from 'react-bootstrap/Accordion'\n\n\nimport \"./App.css\";\n\n\nclass Vote extends Component {\n  //state = { Status: WorkflowStatus.RegisteringVoters, whitelist: null, Propositions: null, web3: null, accounts: null, contract: null, IsOwner:false, VoteNumber:0 };\n\n  constructor(props){\n    super(props);\n    this.state = {HasVoted:false};\n    this.proposalId = React.createRef();\n  }\n\n\n  handleVote = async()=>{\n    const proposalId= this.proposalId.current.value;\n    console.log(\"Vote.js/handleVote: this.proposalId= \", this.proposalId.current.value);\n    this.props.Vote(proposalId);\n    this.setState({HasVoted:true});\n  }\n\n  handleFin = async()=>{\n    this.props.EndVoting();\n  }\n\n  handleTailling = async()=>{\n    if(this.props.IsVoteEnded){\n      this.props.TaillingVotes();\n    }else{\n      alert(\"La session de vote n'est pas encore été terminée.\")\n    }\n    \n  }\n  \n\n\n  render() {\n    const propositions  = this.props.propositions;\n    var VoteSection;\n\n\n    \n\n\n    if(this.props.IsVoteEnded){ //Si la session de vote est terminée \n      VoteSection=<Container>\n      <Jumbotron style={{background:\"#ffcdd2\"}}>\n        <h2>La session de vote est terminée</h2>\n        <p>\n          Prochaine étape: Annoncement des résultats\n        </p>\n        \n      </Jumbotron>\n      </Container>;\n\n    }else{ //Si on est encore en session de vote\n      if(this.props.HasVoted){ //Si on a déjà voté\n      \n      VoteSection = <div style={{display: 'flex', justifyContent: 'center'}}>\n      <Card style={{ width:\"500px\" }}>\n      <Card.Header> <strong style={{color:\"green\"}}> Vote prit en compte </strong></Card.Header>\n      <Card.Body>\n        <div class=\"row justify-content-around align-items-center\">\n\n        <div class=\"col-md-5\"  style={{width:\"500px\"}}>\n        <span>Proposition   &nbsp;\n\n        <Form.Group style={{display: \"inline-block\"}} ref={vote=>{this.proposalId=vote}} >\n          <Form.Control as=\"select\" disabled>\n            {propositions.map((prop,idx)=>{\n              return <option>{idx}</option>\n            })\n          }\n          </Form.Control>\n\n        </Form.Group>\n        </span>\n        </div>\n        <div class=\"col-md-3 offset-md-3\">\n        \n        <Button onClick={this.handleVote} variant=\"primary\" disabled> Voté </Button>\n        </div>\n        </div>\n        \n      </Card.Body>\n      </Card>\n      </div> \n\n      }else{ //Si on n'a pas encore voté\n\n        VoteSection = <div style={{display: 'flex', justifyContent: 'center'}}>\n        <Card style={{ width:\"500px\" }}>\n        <Card.Header> <strong> Voter </strong></Card.Header>\n        <Card.Body>\n          <div class=\"row justify-content-around align-items-center\">\n\n        <div class=\"col-md-5 \"  style={{width:\"500px\"}}>\n        <span>Proposition   &nbsp;\n        <Form >\n        <Form.Group style={{display: \"inline-block\"}}  >\n          <Form.Control as=\"select\" ref={this.proposalId}>\n            {propositions.map((prop,idx)=>{\n              return <option value={idx.toString()}>{idx}</option>\n            })\n          }\n          </Form.Control>\n        \n        </Form.Group>\n        </Form>\n        </span>\n        </div>\n        <div class=\"col-md-3 offset-md-3\">\n        \n        <Button onClick={this.handleVote} variant=\"primary\"  > Voter </Button>\n        </div>\n        </div>\n        \n        </Card.Body>\n        </Card>\n        </div> \n      }\n    }\n\n\n\n    return (\n      <div className=\"App\">\n        <div>\n        <h2 className=\"text-center\">Dapp de Paiement</h2>\n           <hr></hr>\n           <br></br>\n        <h3 className=\"text-center\">Vote</h3>\n        <br></br>\n       </div>\n\n      {VoteSection}\n\n\n      <br/> \n      <hr width=\"70%\"/>\n      <br/>\n      \n      <div style={{display: 'flex', justifyContent: 'center'}}>\n\n      <Card style={{ width: '50rem' }}>\n      <Card.Header> <strong> Liste des Propositions </strong> </Card.Header>\n      <Card.Body>\n      {\n        propositions.map((prop, idx)=>{\n          return(\n            <Accordion defaultActiveKey=\"0\">\n            <Card>\n              <Accordion.Toggle as={Card.Header} eventKey={idx.toString()}>\n                Proposition {idx}\n              </Accordion.Toggle>\n              <Accordion.Collapse eventKey={idx.toString()}>\n                <Card.Body>\n                {prop.Description}\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n            </Accordion>\n          )\n        })\n      }\n      </Card.Body>\n      </Card>\n      </div>\n\n       <br/> \n        \n        {\n          this.props.IsOwner &&   // Partie uniquement accessible à l'owner. Ce dernier a la possibilité de mettre fin à la phase d'enregistrement de propositions et de commencer la hase de vote \n              <div>\n                <hr width=\"70%\" style={{color:\"green\"}}></hr>\n                <span style={{color:\"green\", font_size:\"40px\"}}><strong><font size=\"4\">Administrateur</font></strong></span> <br/><br/>\n               \n                <div class=\"row justify-content-center\">\n                  <div class=\"col-3\">\n                    <Button onClick={ this.handleFin } variant=\"dark\" > Fin de la session de vote </Button>\n                  </div>  \n                  <div class=\"col-3\">\n                    <Button onClick={ this.handleTailling } variant=\"primary\" > Compter les voix </Button>\n                  </div>  \n                </div>\n\n                <br/>\n                <br/>\n                <div style={{ justifyContent: 'center'}}> \n                  {this.props.Reset_Destruct}\n                </div>\n              </div>\n\n          \n        }\n        <br></br>\n      \n      </div>\n    );\n }\n\n}\n\n\nexport default Vote;\n\n","import React, { Component } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Accordion from 'react-bootstrap/Accordion'\n\n\nimport \"./App.css\";\n\nfunction Proposition(props){\n  if(props.idx == props.WinPropId){\n    return  <Card.Header style={{backgroundColor:\"#c8e6c9\"}} >  \n              <Accordion.Toggle as={Card.Header} eventKey={props.idx.toString()}>\n                Proposition {props.idx} : <em>{props.prop.Score} voix</em>\n              </Accordion.Toggle>\n            </Card.Header>\n  }else{\n    return <Card.Header >\n      <Accordion.Toggle as={Card.Header} eventKey={props.idx.toString()}>\n        Proposition {props.idx} : <em>{props.prop.Score} voix</em>\n      </Accordion.Toggle>\n    </Card.Header>\n  }\n}\n\nclass Result extends Component {\n  //state = { Status: WorkflowStatus.RegisteringVoters, whitelist: null, Propositions: null, web3: null, accounts: null, contract: null, IsOwner:false, VoteNumber:0 };\n  state= {WinPropId:null};\n  constructor(props){\n    super(props);\n    const contract = this.props.contract;\n    \n    contract.methods.winningProposalid().call().then(res=>{ this.setState({WinPropId: res});});\n   \n  }\n\n\n\n  render() {\n    if (!this.state.WinPropId) {\n      return <div>Tailling result...</div>;\n    }\n    const propositions  = this.props.propositions;\n    const WinPropId = this.state.WinPropId; \n    const NumVoter= this.props.NumVoter;\n    \n\n    return (\n      <div className=\"App\">\n        <div>\n        <h2 className=\"text-center\">Dapp de Paiement</h2>\n           <hr></hr>\n           <br></br>\n        <h3 className=\"text-center\">Résultats</h3>\n        <br></br>\n       </div>\n\n      <Container>\n      <Jumbotron style={{background:\"#2BBBAD\"}}>\n        <h2 style={{color:\"white\"}}>La <strong><em>Proposition {WinPropId}</em></strong> a gagné <br/> avec {(100*propositions[WinPropId].Score/NumVoter).toFixed(2)}% du corps éléctoral</h2>\n        \n      </Jumbotron>\n      </Container>\n\n      <hr width=\"70%\"/> \n\n      <div style={{display: 'flex', justifyContent: 'center'}}>\n      <Card style={{ width: '50rem' }}>\n      <Card.Header> <strong> Liste des Propositions </strong> </Card.Header>\n      <Card.Body>\n      {\n        propositions.map((prop, idx)=>{\n          return(\n            <Accordion defaultActiveKey={WinPropId.toString()}>\n            <Card>\n\n              <Proposition prop={prop} idx={idx} WinPropId={WinPropId} />\n\n\n              <Accordion.Collapse eventKey={idx.toString()}>\n                <Card.Body>\n                {prop.Description}\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n            </Accordion>\n          )\n        })\n      }\n      </Card.Body>\n      </Card>\n      </div>\n\n      <br/> \n      <hr width=\"70%\"/>      \n        {\n          this.props.IsOwner &&  <div style={{ justifyContent: 'center'}}> \n            <span style={{color:\"green\", font_size:\"40px\"}}><strong><font size=\"4\">Administrateur</font></strong></span> <br/><br/>\n            {this.props.Reset_Destruct}\n            </div>\n              \n\n          \n        }\n        <br></br>\n      \n      </div>\n    );\n }\n\n}\n\n\nexport default Result;\n\n","import React, { Component } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport RegisterAddress from \"./RegisterAddress\";\nimport RegisterProposal from \"./RegisterProposal\";\nimport Vote from \"./Vote\";\nimport Result from \"./Result\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\n\nimport \"./App.css\";\n\n\n\nconst WorkflowStatus={//Etat d'avancement du vote\n  RegisteringVoters : \"RegisteringVoters\",\n  ProposalsRegistrationStarted: \"ProposalsRegistrationStarted\",\n  ProposalsRegistrationEnded: \"ProposalsRegistrationEnded\",\n  VotingSessionStarted: \"VotingSessionStarted\",\n  VotingSessionEnded: \"VotingSessionEnded\",\n  VotesTallied: \"VotesTallied\"\n};\n\nfunction Status_Sol2Web(Sol_Status){\n  switch (Sol_Status){\n    case \"0\":\n      return WorkflowStatus.RegisteringVoters;\n      break;\n    case \"1\": \n      return WorkflowStatus.ProposalsRegistrationStarted;\n      break;\n    case \"2\": \n      return WorkflowStatus.ProposalsRegistrationEnded;\n      break;\n    case \"3\": \n      return WorkflowStatus.VotingSessionStarted;\n      break;\n    case \"4\": \n      return WorkflowStatus.VotingSessionEnded;\n      break;\n    case \"5\": \n      return WorkflowStatus.VotesTallied;\n      break;\n  }\n}\n\nclass App extends Component {\n  state = { Status: WorkflowStatus.RegisteringVoters, whitelist: null, Propositions: null, web3: null, accounts: null, contract: null, IsOwner:false, HasVoted:false};\n\n  initState = async () =>{\n    return { Status: WorkflowStatus.RegisteringVoters, whitelist: null, Propositions: null, web3: null, accounts: null, contract: null, IsOwner:false, HasVoted:false};\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Voting.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Voting.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      instance.events.VoterRegistered( this.HandleVoterRegistered);\n      instance.events.ProposalsRegistrationStarted(this.HandleStartProposalRegistration);\n      instance.events.ProposalRegistered(this.HandleProposalRegistered);\n      instance.events.ProposalsRegistrationEnded(this.HandleProposalsRegistrationEnded);\n      instance.events.VotingSessionStarted(this.HandleVotingSessionStarted);\n      instance.events.Voted(this.HandleVote);\n      instance.events.VotingSessionEnded(this.HandleVotingSessionEnded);\n      instance.events.VotesTallied(this.HandleVotesTallied);\n      //instance.events.Status((err,ev)=>{console.log(\"GetStatus:\",ev.returnValues.status)});\n\n      const owner_address = await instance.methods.owner().call();\n      console.log(\"owner: \",owner_address);\n      console.log(\"Account add: \", accounts[0]);\n      //console.log(\"instance: \",instance);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3: web3, accounts: accounts, contract: instance, IsOwner:(owner_address == accounts[0]) }, this.LoadState);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  LoadState = async () => {\n    const { accounts, contract } = this.state;\n    \n    //var statu = await contract.methods.GetStatus().send({from:accounts[0]});\n    var statu = await contract.methods.GetStatus().call();\n    const Status = Status_Sol2Web(statu);\n\n    //console.log(\"statu: \",statu,\",  Status: \",Status);\n    //const Status = await contract.methods.GetStatus().call();\n\n    // récupérer la liste des comptes autorisés\n    const whitelist = await contract.methods.GetWhiteList().call();\n    let Propositions = await contract.methods.GetPropositions().call();\n\n    if(Propositions)\n      Propositions = Propositions.map(p=>{return({Description:p[0], Score:p[1]})});\n   \n    let HasVoted= false;\n\n    if (whitelist && whitelist.includes(accounts[0])) {\n      HasVoted = await contract.methods.HasVoted(accounts[0]).call();\n    }\n    \n\n    console.log(\"LoadState: Status=\",Status,\", whitelist=\",whitelist,\", Propositions=\",Propositions, \"HasVoted=\", HasVoted);\n\n    // Mettre à jour le state \n    this.setState({Status:Status, whitelist: whitelist, Propositions:Propositions, HasVoted: HasVoted});\n  \n  };\n\n\n/*Gére les événements reçus de la part du smart contract*/\n\n  //S'acctive lorsqu'on reçoit un event \"VoterRegistered\"\n  HandleVoterRegistered = async(err,ev) =>{\n    let { whitelist, contract } = this.state;\n    const voterAddress= ev.returnValues.voterAddress\n    if(whitelist == null || !whitelist.includes(voterAddress)){\n      whitelist = (whitelist != null) ? (whitelist.concat([voterAddress])): [voterAddress];\n      this.setState({whitelist: whitelist});\n    }\n\n  };\n\n  //S'acctive lorsqu'on reçoit un event \"ProposalsRegistrationStarted\"\n  HandleStartProposalRegistration = async(err,event)=>{\n    const statu = Status_Sol2Web(\"1\");\n    this.setState({Status: statu});\n  }\n\n  HandleProposalRegistered = async(err,event)=>{\n    const { Propositions, contract } = this.state;\n    const PropId = event.returnValues.proposalId;\n    const Description = await contract.methods.ProposalDescriptionById(PropId).call();\n    const Proposal = {Description: Description, Score:0};\n    const NewProposition = (Propositions != null) ? (Propositions.concat([Proposal])): [Proposal];\n    this.setState({Propositions: NewProposition});\n  }\n\n  HandleProposalsRegistrationEnded = async(err,event)=>{\n    const statu = Status_Sol2Web(\"2\");\n    this.setState({Status: statu});\n  }\n\n  HandleVotingSessionStarted = async(err,event)=>{\n    const statu = Status_Sol2Web(\"3\");\n    this.setState({Status: statu});\n  }\n\n  HandleVote = async(err,event)=>{\n    const { Propositions, contract } = this.state\n    const PropId = event.returnValues.proposalId;\n    Propositions[PropId].Score++;\n    this.setState({Propositions: Propositions});\n  }\n\n  HandleVotingSessionEnded = async(err,event)=>{\n    const statu = Status_Sol2Web(\"4\");\n    this.setState({Status: statu});\n  }\n\n  HandleVotesTallied = async(err,event)=>{\n    const { contract } = this.state;\n    const statu = Status_Sol2Web(\"5\");\n    const Win = await contract.methods.winningProposalid().call();\n    this.setState({Status:statu });\n  }\n\n\n      /*Permet d'effectuer des transactions vers le contract*/\n\n  //Permet à l'Owner d'enregistrer l'addresse \"address\" dans la whitelist\n  RegisterVoter=async (address) => {\n    const { accounts, contract } = this.state;\n    //const address = this.address.value;\n    \n    // Interaction avec le smart contract pour ajouter un compte \n    await contract.methods.RegisterVoter(address).send({from: accounts[0]});\n    // Récupérer la liste des comptes autorisés\n    //this.UpdateWhitelist();\n  }\n\n  //Permet à l'Owner de passer à l'étape de créations des propositions.\n  BeginProposalsRegistration = async()=>{\n    const { accounts, contract } = this.state;\n    await contract.methods.BeginProposalStep().send({from:accounts[0]});\n  }\n\n  RegisterProposal = async(Proposal)=>{\n    const {whitelist, accounts, contract } = this.state;\n    if(whitelist.includes(accounts[0])){\n      await contract.methods.RegisterProposal(Proposal).send({from: accounts[0]});\n    }else{\n      alert(\"Votre compte n'est pas inclut dans la Whitelist\");\n    }\n  }\n\n  EndProposalsRegistration = async()=>{\n    const { accounts, contract } = this.state;\n    await contract.methods.EndProposalStep().send({from:accounts[0]});\n  }\n\n\n  StartVoting = async()=>{\n    const { accounts, contract } = this.state;\n    await contract.methods.StartVoting().send({from:accounts[0]});\n  }\n\n\n  Vote = async(ProposalId)=>{\n    const {whitelist, accounts, contract } = this.state;\n    if(whitelist.includes(accounts[0])){\n      await contract.methods.Vote(ProposalId).send({from: accounts[0]});\n      this.setState({HasVoted:true});\n    }else{\n      alert(\"Votre compte n'est pas inclut dans la Whitelist\");\n    }\n    \n  }\n\n  EndVoting = async()=>{\n    const { accounts, contract } = this.state;\n    await contract.methods.EndVoting().send({from:accounts[0]});\n  }\n\n  TaillingVotes = async()=>{\n    const { accounts, contract } = this.state;\n    await contract.methods.TaillingVotes().send({from:accounts[0]});\n\n  }\n\n  Reset = async ()=>{\n    try{\n      const { accounts, contract } = this.state;\n      await contract.methods.Reset().send({from:accounts[0]});\n      //this.setState(await this.initState());\n      this.setState({Propositions:null, whitelist:null, Status: WorkflowStatus.RegisteringVoters, HasVoted:false});\n      await this.LoadState();\n    }catch(error){\n       alert(\n        `Failed reseting the contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  SelfDestruct = async()=>{\n    const { accounts, contract } = this.state;\n    await contract.methods.DestructContract().send({from:accounts[0]});\n    this.setState(await this.initState());\n    this.componentDidMount();\n  }\n\n  render(){\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    var show;\n    console.log(\"State=\",this.state);\n    switch (this.state.Status){\n      case WorkflowStatus.RegisteringVoters:\n        show = <div className=\"App\">\n          <RegisterAddress \n             RegisterVoter={this.RegisterVoter}\n             BeginProposalRegistering={this.BeginProposalsRegistration}\n             whitelist={this.state.whitelist}\n             IsOwner={this.state.IsOwner}\n             Reset_Destruct={<Reset_Destruct HandleReset={this.Reset} HandleDestruct={this.SelfDestruct}/>}\n          />\n        </div>\n        \n        break;\n\n      case WorkflowStatus.ProposalsRegistrationStarted: case WorkflowStatus.ProposalsRegistrationEnded:\n        show= <div className=\"App\">\n          <RegisterProposal\n            RegisterProposal={this.RegisterProposal}\n            EndProposalsRegistration={this.EndProposalsRegistration}\n            StartVoting={this.StartVoting}\n            propositions={this.state.Propositions}\n            IsOwner={this.state.IsOwner}\n            EndProposal={(this.state.Status === WorkflowStatus.ProposalsRegistrationEnded)}\n            Reset_Destruct={<Reset_Destruct HandleReset={this.Reset} HandleDestruct={this.SelfDestruct}/>}\n          />\n          </div>\n        break;\n\n      case (WorkflowStatus.VotingSessionStarted): case WorkflowStatus.VotingSessionEnded:\n        show=<div className=\"App\">\n          <Vote\n            Vote={this.Vote}\n            EndVoting={this.EndVoting}\n            TaillingVotes={this.TaillingVotes}\n            propositions={this.state.Propositions}\n            IsVoteEnded={(this.state.Status === WorkflowStatus.VotingSessionEnded)}\n            IsOwner={this.state.IsOwner}\n            HasVoted={this.state.HasVoted}\n            Reset_Destruct={<Reset_Destruct HandleReset={this.Reset} HandleDestruct={this.SelfDestruct}/>}\n          />\n          </div>\n        break;\n\n        case WorkflowStatus.VotesTallied:{\n          show=<div className=\"App\">\n            <Result\n              propositions={this.state.Propositions}\n              IsOwner={this.state.IsOwner}\n              contract= {this.state.contract}\n              NumVoter={this.state.whitelist.length}\n              Reset_Destruct={<Reset_Destruct HandleReset={this.Reset} HandleDestruct={this.SelfDestruct}/>}\n            />\n            </div>\n          break;\n        }\n    }\n    \n    return(show);\n  }\n}\n\nfunction Reset_Destruct(props){\n  /*return(\n    <div className=\"row justify-content-center\">\n      <div className=\"col-3\">\n        <Button  onClick={ props.HandleReset } variant=\"danger\" > Reset </Button>\n      </div>\n      <div className=\"col-3\">\n        <Button  onClick={ props.SelfDestruct } variant=\"danger\" > SelfDestruct </Button>\n      </div>\n    </div>\n    )*/\n  return(\n    <Button  onClick={ props.HandleReset } variant=\"danger\" > Reset </Button>\n    )\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}